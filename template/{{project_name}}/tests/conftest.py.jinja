from collections.abc import Callable
import contextlib
from typing_extensions import Any, ContextManager

import pytest
import time_machine
from flask import Flask
from flask.testing import FlaskClient
from whenever import Instant

from {{ module_name }}.config import settings
from {{ module_name }}.main import create_app


@pytest.fixture
def tweak_settings() -> Callable[..., ContextManager[Any]]:
    @contextlib.contextmanager
    def _helper(**kwargs: Any):
        previous_values: dict[str, Any] = {}
        for key, value in kwargs.items():
            previous_values[key] = getattr(settings, key)
            setattr(settings, key, value)

        try:
            yield
        finally:
            for key, value in previous_values.items():
                setattr(settings, key, value)

    return _helper


@pytest.fixture
def app() -> Flask:
    return create_app()


@pytest.fixture
def client(app: Flask) -> FlaskClient:
    return app.test_client()


Frosty = Callable[[str], time_machine.travel]


@pytest.fixture
def frozen_time() -> Frosty:
    def _helper(moment: str) -> time_machine.travel:
        now = Instant.parse_common_iso(moment)
        return time_machine.travel(now.py_datetime())

    return _helper
